#!/usr/bin/env python

import os, sys, subprocess, re, time
from threading import Thread
try:
    from gppylib.gpparseopts import OptParser, OptChecker
    from gppylib.gplog import *
    from gppylib.commands.gp import *
    from gppylib.db import dbconn
    from gppylib.userinput import *
    from pygresql import pg

    from gppylib.gpcoverage import GpCoverage
except ImportError, e:
    sys.exit('Cannot import modules.  Please check that you have sourced greenplum_path.sh.  Detail: ' + str(e))

EXECNAME = os.path.split(__file__)[-1]

'''
Parse command-line arguments using gpparseopts
'''
def parse_args():

    parser = OptParser(option_class=OptChecker)
    parser.remove_option('-h')
    parser.add_option('-u', '--user')
    parser.add_option('-h', '-?', '--help', action='help')
    parser.add_option('-v','--verbose', action='store_true')
    parser.add_option('--debug', action='store_true')
    parser.add_option('-d','--database', type='string')
    (options, args) = parser.parse_args()

    USER=os.getenv('USER')
    if USER is None or USER is ' ':
        logger.error('USER environment variable must be set.')
        parser.exit()

    if options.database is None:
        options.database = os.environ.get('PGDATABASE', 'template1')

    return options

'''
Connect to database method using environment values by default
'''
def connect(user=None, password=None, host=None, port=None, 
            database=None, utilityMode=False):
    '''Connect to DB using parameters in GV'''
    options = utilityMode and '-c gp_session_role=utility' or None
    if not user: user = os.environ.get('PGUSER')
    if not user: user = os.environ.get('USER')
    if not password: password = os.environ.get('PGPASSWORD')
    if not host: host = 'localhost'
    if not port: port = os.environ.get('PGPORT',5432)
    if not database: database = os.environ.get('PGDATABASE', 'postgres')
    try:
        logger.debug('connecting to %s:%s %s' % (host, port, database))
        db = pg.connect(host=host, port=port, user=user,
                        passwd=password, dbname=database, opt=options)
    except pg.InternalError, ex:
        logger.fatal('could not connect to %s: "%s"' % 
            (database, str(ex).strip()))
        exit(1)
    
    logger.debug('connected with %s:%s %s' % (host, port, database))     
    return db

'''
Retrieve Greenplum database version
'''
def getversion():
    db = connect()
    curs = db.query('''
    select regexp_replace(version(), 
       E'.*PostgreSQL [^ ]+ .Greenplum Database ([1-9]+.[0-9]((.[0-9])?(.[0-9])?)+|main).*', 
       E'\\\\1') as ver;''')

    row = curs.getresult()[0]
    version = row[0]

    logger.info('Greenplum database version %s' % version)
    return version

class integrity_query:

    def __init__(self,schema,name):
        self.query = "COPY %s.%s TO '/dev/null'" % (schema,name)

class tables_query:
    def __init__(self):
        self.query = "SELECT n.nspname, c.relname from pg_class c join pg_namespace n on c.relnamespace = n.oid where c.relkind = 'r' and relstorage != 'x' and n.nspname != 'pg_catalog' and c.relhassubclass='f'"

def userConfirm():
    if not ask_yesno('', "Are you sure you want to ignore unreachable hosts?",'N'):
        logger.info("User Aborted. Exiting...")
        sys.exit(0)


class MyThread(Thread):
    def __init__(self, val):
        ''' Constructor. '''
 
        Thread.__init__(self)
        self.val = val
 
 
    def run(self):
        for i in range(1, self.val):
            print('Value %d in thread %s' % (i, self.getName()))
 
            # Sleep for random time between 1 ~ 3 second
            secondsToSleep = 1
            print('%s sleeping fo %s seconds...' % (self.getName(), secondsToSleep))
            time.sleep(secondsToSleep)

#############

if __name__ == '__main__':

    coverage = GpCoverage()
    coverage.start()

    logger = get_default_logger()
    setup_tool_logging(EXECNAME,getLocalHostname(),getUserName())

    options = parse_args()
    version = getversion()
    logger.info("Checking integrity of database %s" % options.database)
    if not ask_yesno('', "Are you sure you want to check integrity of database %s?" % options.database,'N'):
        logger.info("User Aborted. Exiting...")
        sys.exit(0)


    if options.verbose:
        enable_verbose_logging()

    try:
        

        myThreadOb1 = MyThread(4)
        myThreadOb1.setName('Thread 1')
     
        myThreadOb2 = MyThread(4)
        myThreadOb2.setName('Thread 2')

        # Start running the threads!
        myThreadOb1.start()
        myThreadOb2.start()

        # Wait for the threads to finish...
        myThreadOb1.join()
        myThreadOb2.join()
     
        print('Main Terminating...')

    except Exception, e:
        logger.error('errors in job:')
        logger.error(e.__str__())
        logger.error('exiting early')
    
    logger.info("completed successfully")

    coverage.stop()
    coverage.generate_report()
